---Building Forms:---
Forms are an essential part of many applications, in this section we'll learn how to build them with react &
third part libraries.

Tooling:
-react hook forms - for managing form state
-zod - for data validation



---2 - Building a Form:---
So to start building a form we'll start by adding bootstrap back in.


Task 1 - enable bootstrap:
Go to main.tsx and add the import back in.
import "bootstrap/dist/css/bootstrap.css";


Task 2 - create basic form:
-use bootstrap utility classes mb-3, form-label, form-control etc.
-use type to infer what data should go into the form control. 

<div className="mb-3">
          <label htmlFor="name" className="form-label">
            Name
          </label>
          <input id="name" type="text" className="form-control"></input>
</div>

Note:
make sure to have ID & htmlFor matching, this is needed for a browser to associated forms & labels.

          <label htmlFor="age" className="form-label"></label>
          <input id="age" type="number" className="form-control" />


Task 3 - Update Form Styling:
Our form controls look a bit off, so the best way to fix this is to add global styling in index.css, then import
this into main.tsx like so.
import "./index.css";



---3 - Handling Form Submission:---
Submitting data is simple enough, we need to bind to the onSubmit function within the form.


Task 1 - Bind function to onSubmit
      <form onSubmit={handleSubmit}>


note:
the default form function will submit data to server, and trigger a page refresh.
To stop this undesirred behavior we need to call event.preventDefault.


Task 2 - Create Function:
just a normal function, except we taake in the event
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    console.log("submiting....");
  };

We will cover the data transmission part of this in the next section.



---4 - Accessing Input Fields:---

So react provides hooks for looking at DOM elements, called useRef.
This is how we're going to listen for input values.


Task 1 - Create variables for holding DOM Data:
  const nameRef = useRef<HTMLInputElement>(null);
  const ageRef = useRef<HTMLInputElement>(null);
  let person = { name: "", age: 0 };


Task 2 - Add Ref to HTML:
we add the ref property, and set it to the newly created nameRef object above
 <input
            ref={nameRef}
            id="name"
            type="text"
            className="form-control"
          >
</input>



note:
Because the way useRef is designed & initialized we have a couple issues.
At the time we create the useRef, the DOM elements won't be built, so we get errors about potentials for null/undefined.
We also have to provide null, even tho its clearly going to be null anyway, looks ugly.



Task 3 - Update & Submit:
-make sure ref object isn't null, then save it.
-finally log data to screen.
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    if (nameRef.current?.value !== null)
      person.name = nameRef.current?.value as string;

    if (ageRef.current !== null) person.age = parseInt(ageRef.current.value);

    console.log("person - ", person);
  };


Take Home:
useRef allows us to access any DOM object, HTMLInputElement is defined in most browsers as a generic INPUT.
We obviously have buttons, inputs, divs and so on.