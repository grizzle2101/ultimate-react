---Building Forms:---
Forms are an essential part of many applications, in this section we'll learn how to build them with react &
third part libraries.

Tooling:
-react hook forms - for managing form state
-zod - for data validation



---2 - Building a Form:---
So to start building a form we'll start by adding bootstrap back in.


Task 1 - enable bootstrap:
Go to main.tsx and add the import back in.
import "bootstrap/dist/css/bootstrap.css";


Task 2 - create basic form:
-use bootstrap utility classes mb-3, form-label, form-control etc.
-use type to infer what data should go into the form control. 

<div className="mb-3">
          <label htmlFor="name" className="form-label">
            Name
          </label>
          <input id="name" type="text" className="form-control"></input>
</div>

Note:
make sure to have ID & htmlFor matching, this is needed for a browser to associated forms & labels.

          <label htmlFor="age" className="form-label"></label>
          <input id="age" type="number" className="form-control" />


Task 3 - Update Form Styling:
Our form controls look a bit off, so the best way to fix this is to add global styling in index.css, then import
this into main.tsx like so.
import "./index.css";



---3 - Handling Form Submission:---
Submitting data is simple enough, we need to bind to the onSubmit function within the form.


Task 1 - Bind function to onSubmit
      <form onSubmit={handleSubmit}>


note:
the default form function will submit data to server, and trigger a page refresh.
To stop this undesirred behavior we need to call event.preventDefault.


Task 2 - Create Function:
just a normal function, except we taake in the event
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    console.log("submiting....");
  };

We will cover the data transmission part of this in the next section.



---4 - Accessing Input Fields:---

So react provides hooks for looking at DOM elements, called useRef.
This is how we're going to listen for input values.


Task 1 - Create variables for holding DOM Data:
  const nameRef = useRef<HTMLInputElement>(null);
  const ageRef = useRef<HTMLInputElement>(null);
  let person = { name: "", age: 0 };


Task 2 - Add Ref to HTML:
we add the ref property, and set it to the newly created nameRef object above
 <input
            ref={nameRef}
            id="name"
            type="text"
            className="form-control"
          >
</input>



note:
Because the way useRef is designed & initialized we have a couple issues.
At the time we create the useRef, the DOM elements won't be built, so we get errors about potentials for null/undefined.
We also have to provide null, even tho its clearly going to be null anyway, looks ugly.



Task 3 - Update & Submit:
-make sure ref object isn't null, then save it.
-finally log data to screen.
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    if (nameRef.current?.value !== null)
      person.name = nameRef.current?.value as string;

    if (ageRef.current !== null) person.age = parseInt(ageRef.current.value);

    console.log("person - ", person);
  };


Take Home:
useRef allows us to access any DOM object, HTMLInputElement is defined in most browsers as a generic INPUT.
We obviously have buttons, inputs, divs and so on.


--- 5 -Controlled Components:---
There is another way to get a value from a form, other than the refHook.
We can use the stateHook.


Task 1 - Create Person State Object:
  const [person, setPerson] = useState({
    name: "",
    age: 0,
  });


Task 2 - Bind to onChange:
update the person onChange of the input field.

          <input
            onChange={(event) =>
              setPerson({ ...person, name: event.target.value })
            }
            id="name"
            type="text"
            className="form-control"
          ></input>


Task 3 - Submit:
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    console.log("person - ", person);
  };


Note:
Its possible the value in react & the input field could be different. Eg if we update from the compnent.
So keep these in sync, we should set the INPUT value property.
This is called a 'controller component' as react has complete control over the value here, not the DOM
            className="form-control"
            value={person.name}
          ></input>


Note:
Some people don't like this approach, because any change to the input fields means a re-render, even adding a full stop.
So some people don't like the approach of using useState, and insist on useRef for performance.
But remember premature optimization is the root of all evil!
If you have complex form, maybe it makes for sense! but for smaller forms this perfectly ligimate.



---6 - Managing Forms with React Hook:---
As our forms get more complex, managing state with the stateHook can become time consuming & error prone.
We have to make 2 changes
-onChange event
-value attritube


There way to simplfy this is with a libary called react-form-hook

Step 1 - Install:


Step 2 - Import & Use:

It has some really useful methods & properties:
clearErrors
control
formState
setError
setValue
register - register a input field with react.



Step 3 - Destructure the Form:

  const { register } = useForm();
  console.log("register - ", register("name"));

Result:
This creates a form object, using reference hooks to get values from objects.
There is no re-rendering involved here.
{name: 'name', onChange: ƒ, onBlur: ƒ, ref: ƒ}



Step 4 - Usage:
So after knowing how register works, we simple use register inside the input field.

          <input
            {...register("name")}
            id="name"
            type="text"
            className="form-control"
          ></input>


Step 5 - Submit:

react hook also has a method for submitting the form.
To get access, we just add it to our destrtucturing code.
  const { register, handleSubmit } = useForm();

Then call it inside the onSubmit event.

      <form onSubmit={handleSubmit(onSubmit)}>

And pass in the function that gets envoked once the form is submitted.
  const onSubmit = (data: FieldValues) => console.log("sending - ", data);


Take Home:
react form hook means we can create form control objects, validation & submiting with much less code.
