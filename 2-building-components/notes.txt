
---1 - introduction:---
In this section you'll learn
-building components
-rendering markup with JSX
-managing state
-passing inupt via props
-debugging react apps


---2 - Creating a ListGroup Component:---


Step 1 - Install Bootstrap
npm install bootstrap@5.2.3

Step 2 - Replace built in CSS
app.css - delete the contents
index.css - delete the file

replace references to index.css to bootstrap
import "bootstrap/dist/css/bootstrap.css";

Step 3 - Create Component:
-create components folder - by convention, put all reuseable components into their own folder.
-create the ListGroup component (note with pascal case)
-take some bootstrap markup

Step 4 - modify app to use ListGroup Component:
-remove message.tsx
-update imports & usage in main.tsx

Voila we have a basic component, we're going to add more interactivity in each lecture.



---3 - Fragments:---
In react, a component can not return more than 1 element.

So for us to add a heading into the list group, we get a compilation error.
    <h1>Test<h1/>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>

React under the hood is trying
Reace.createElement('h1') but we're providing multiple elements instead.

Workarounds:
One workaround is to encapsulate everything in one div like so
<div>
    <h1><h1/>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>
</div>

This works, however we're creating HTML just to get around react requirements, this is really not the correct way.
Fragments to the rescue.


Version 1:

    <Fragment>
    <h1>List</h1>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>
    </Fragment>
  );

Or its shorthand <> where react sees <>, it will insert the Fragment.

 return (
    <>
      <h1>List</h1>
      <ul className="list-group">
        <li className="list-group-item">An item</li>
        <li className="list-group-item">A second item</li>
        <li className="list-group-item">A third item</li>
        <li className="list-group-item">A fourth item</li>
        <li className="list-group-item">And a fifth one</li>
      </ul>
    </>
  );


Take Home:
Fragments are a way to combine multiple HTML attributes into a react component.



---4 - Rendering Lists:---
So lets get started rendering some data!
In JSX there is no such thing as for loops, so we have to do things a bit differently.

Problem 1 - Convery Array to <li> items.
using the map function, we can return the array like so.
items.map((item) => <li>{item}</li>))


Problem 2 - We cant just insert this block into our JSX.
React wants to either call another react component or another HTML element.
It does not know what to do with our JavaScript code in the middle of our JSX

solution - parenthesis:
Our code can execute inside a parenthesis block.
return (
    <>
      <h1>List</h1>
      <ul className="list-group">
        {items.map((item) => (
          <li>{item}</li>
        ))}
      </ul>
    </>
  );
}


Problem 3 - no key property:
If we look in the console, we can see a warning no key provided!
React needs a unique key property to keep track of the elements, when we're getting data from an API
we should have an ID property, or in this case the names are unique, we can use the names themselves.

        {items.map((item) => (
          <li key={item}>{item}</li>
        ))}

note:
We did remove the classname from the LI, to the styling wemt. Fear not, this will be covered later.



---5 - Conditional Rendering:---
So in order to dynamically show/hide things we have a couple approaches.


Solution 1 - In JavaScript:
So we can add some logic, then return the correct message as required.
Problem with this solution is it leads to a lot of duplication.
  if (items.length === 0) return;
  <>
    <h1>List</h1>
    <p>No Items Found</p>
  </>;


solution 2 - In our JSX:
We can use ternary operators inside the JSX to show a section or render null
  <>
    <h1>List</h1>
    {items.length === 0 ? <p>No Items Found</p> : null}
    <ul className="list-group">
      {items.map((item) => (
        <li key={item}>{item}</li>
      ))}
    </ul>
  </>;
}


Solution 3 - Extracting Message to a Variable or function:
So when Conditionally rendering, we can use a constant for something simple.
  const message = items.length === 0 ? <p>No Items Found</p> : null;

Or for something more fancy we can use a function, because functions can take in parameters...
  const getMessage = () => {
    return items.length === 0 ? <p>No Items Found</p> : null;
  };


Code Optimization:
So the ternary operator with null is kind of nasty, we can abuse some comparison operators to achieve the same
results in less code.

combining a boolean value && a value, returns the value.
true && 1 - returns 1

So for us
items.length === 0 && <p> NO DATA!</p>

if its true, we get the resulting paragraph text.

This is REACT DEVELOPER TOP TIP. ABUSING operators.



---6 - Handling Events:---
So to add click events to a list element we simply use the onClick function.

Simple  OnClick:
 onClick={() => console.log("clicked ")}


OnClick with Variables:
While we are inside the map function, we have access to the item, and a few other things like the index.
 onClick={() => console.log("clicked - ", item, " @", index)}


OnClick with Browser Event:
We can pass in parameters from the browser, including the event.
  onClick={(event) => console.log("clicked - ", event)}


SyntheticBaseEvent:
So after logging that event we get something new, a SyntheticBaseEvent object.
This is the react teams implementation of a base event, because each Browser is going to have their own
version, it helps to have a generic version that is cross compatible.
A wrapper on native browser event.



Adding More Complex Logic:
Our current implementation is fine, but if gets any bigger we need to extract to its own function.
-by convention we call is handleX
-What type is the event? a ReactMouseEvent
-note when we use the function in onClick, we're not calling it. We're passing a referce to a function, that onClick
 will call.

Function:
We use an event handler for more complex logic.
  const handleClick = (event: MouseEvent) => console.log("clicked - ", event);


Usage:
    <li className="list-group-item" key={item} onClick={handleClick}>



---7 - Managing State:---
So the next thing is to highlight the item on selection.
So using bootstrap we can easily highlight a selected item using 'active', the problem is we need to
dynamically assign this.


Task 1 - Store Index:
  let selectedIndex = 0;

Task 2 - dynamically assign className:
We can use the same approach as before to conditionally assign a class.
 <li
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={() => (selectedIndex = index)}
          >
            {item}
  </li>

Task 3 - Update Index:
onClick={() => (selectedIndex = index)}


Problem:
So our index is not being updated, turns out our Variable are scoped locally, and not in the JSX.
We need to use some built in state management to manage this.

Note:
Using React we never have to think about updating the DOM, we think about updating the components that have state.
React will automatically update the DOM to reflect the new state.

Task 4 - useState Hook:
So we need to introduce our first hook, to store & update the selected index.

How it works:
let arr = useState(-1);
arr[0] - Variable
arr[1] - updated function.

Note:
Rather than using it as an Array, we can simplfy it with destructuring.
We now break the state object into a value & function.

  const [selectedIndex, setSelectedIndex] = useState(-1);
  or
  const [name, setName] = useState('');


Task 5 - Modify State:
 onClick={() => {
              setSelectedIndex(index);



Take Home:
This is how we tell react we have state thats going to change over time.
-ternary operator - if index === selectedIndex
-useState - variable & function to store the index
-call setSelectedIndex function in the OnClick function

And Boom we have connected a state hook to a click event in our first component!


Another Take Home:
IF we create 2 list group items, they are each going to have their OWN state variables.
State is unique to a component instance.


---8 - Passing Data via Props:---
What if we want to show a list of names? we don't want to create a whole new component.
Props or properties are the input to our components


Step 1 - define interface:
Define the shape of the object we want to pass in.
interface Props {
  items: string[];
  heading: string;
}

Step 2 - update the function:

function ListGroup(props: Props) {


Step 3 - Pass data to child component:
So we move items to the APP file, and pass in the data like HTML attributes.
  var items = ["New York", "San Fransico", "Tokyo", "London", "Paris"];


  return (
    <div>
      <ListGroup items={items} heading="Cities" />
    </div>
  );


Step 4 - Use passed in values:
So we can access the value using props.items, but a cleaner way is to destructure props like so.
function ListGroup({ items, heading }: Props)

Then our code can just call items.length like before.
 <h1>{heading}</h1>
      {items.length === 0 && <p>No Items Found</p>}


Take Home:
So the take home is, we use PROPS to pass data to a component.



---9 - Passing Functions via Props:---
So usually something should happen after we click on the city.
We need to figure out how to pass a function to the child component.


Step 1 - Update interface:
we start by adding a function to our props, takes in an item & returns void.

interface Props {
  items: string[];
  heading: string;
  onSelectItem: (item: string) => void;
}



Step 2 - Update APP:
So we got some compilation errors, typescript knows we didnt provide the new function.
Define a function that logs the item.
  const handleSelectItem = (item: string) => {
    console.log("item - ", item);
  };

Then pass the function in the ListGroup invokation here.
  return (
    <div>
      <ListGroup
        onSelectItem={handleSelectItem}
        items={items}
        heading="Cities"
      />
    </div>
  );


Step 3 - Call Function inside Component:
So firstly we need to update the object destructuring to include the new function.

function ListGroup({ items, heading, onSelectItem }: Props) {

Then simply call the onSelectItem function when click is triggered.
 onClick={() => {
              setSelectedIndex(index);
              onSelectItem(item);
            }}



Take Home:
Adding a function is as easy as adding a function to props, updating the parent & calling in the child.



---10 - State V Props:---
So lets go over the similarities & differences between state & props:


Props:
-Input passed to a component (similar to function arguments)
-immutable - eg unchangeable (read only)
-cause a re-render


State:
-Internal data management by a component
-mutable - should be changing
-cause a re-render


Take home:
Both changes causes a re-render, props is for input & should never change, where as state is internal to a component
and is expected to change.



---11 - Passing Children:---
So there are times we want to pass a child component, like passing out listgroup to the div element.


Step 1 - Create a new Component:

interface Props {
  text: string;
}

const Alert = ({ text }: Props) => {
  return <div className="alert alert-primary">{text}</div>;
};

export default Alert;


Step 2 - Use Component:
So if we modify the App component, we can pass in the text like so.
function App() {
  return (
    <div>
      <Alert text="Hello World" />
    </div>
  );
}

Problem:
So normally when writing HTML, we want to wrap out markup like this
<Alert> This is my alert </Alert> 
How do we do that?


Solution - use the Children Property:
Every props has a property called CHILDREN, this is what we use to apprend children to our components.
interface Props {
  children: string;
}

const Alert = ({ children }: Props) => {
  return <div className="alert alert-primary">{children}</div>;
};


What if we add Markup?
We get a compilation error if we add HTML. This is because our props is expecting a string.
      <Alert><h1>This is my alert</h1></Alert>

Solution - ReactNode:
So our problem is React expects a string, and we gave markup.
To allow this to work, we cast the input as ReactNode.

interface Props {
  children: ReactNode;
}



Take Home:
Use Children property as ReactNode type, to pass child components.
Then use children to render the child components insdie our JSX.


---12 - Inspecting Components:---
So for help debugging & working with react apps, there is a chrome extension called react dev tools.
Make sure to install it as part of any development setup.


Features:
-component hierarchy
-view props
-inspect DOM element for a given component
-view source & source code for component


---Excercise 1 - Creating a Button:---
Take everything we've done so far and create a bootstrap button component.


Tasks:
-create simple button
-pass text
-click event
-pass color
-error handling - invalid color


Tip from Mosh:
We can use string literals to tell the typescript compiler what values we accept.
interface Props {
  children: ReactNode;
  color?: "primary" | "secondary" | "danger";
  onClick: () => void;
}

If we set the value to anything other than our string literals we get a compilation error.
      <Button color='WEEE' onClick={onClick}>