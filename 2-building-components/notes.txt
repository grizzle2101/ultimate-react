
---1 - introduction:---
In this section you'll learn
-building components
-rendering markup with JSX
-managing state
-passing inupt via props
-debugging react apps


---2 - Creating a ListGroup Component:---


Step 1 - Install Bootstrap
npm install bootstrap@5.2.3

Step 2 - Replace built in CSS
app.css - delete the contents
index.css - delete the file

replace references to index.css to bootstrap
import "bootstrap/dist/css/bootstrap.css";

Step 3 - Create Component:
-create components folder - by convention, put all reuseable components into their own folder.
-create the ListGroup component (note with pascal case)
-take some bootstrap markup

Step 4 - modify app to use ListGroup Component:
-remove message.tsx
-update imports & usage in main.tsx

Voila we have a basic component, we're going to add more interactivity in each lecture.



---3 - Fragments:---
In react, a component can not return more than 1 element.

So for us to add a heading into the list group, we get a compilation error.
    <h1>Test<h1/>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>

React under the hood is trying
Reace.createElement('h1') but we're providing multiple elements instead.

Workarounds:
One workaround is to encapsulate everything in one div like so
<div>
    <h1><h1/>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>
</div>

This works, however we're creating HTML just to get around react requirements, this is really not the correct way.
Fragments to the rescue.


Version 1:

    <Fragment>
    <h1>List</h1>
    <ul className="list-group">
      <li className="list-group-item">An item</li>
      <li className="list-group-item">A second item</li>
      <li className="list-group-item">A third item</li>
      <li className="list-group-item">A fourth item</li>
      <li className="list-group-item">And a fifth one</li>
    </ul>
    </Fragment>
  );

Or its shorthand <> where react sees <>, it will insert the Fragment.

 return (
    <>
      <h1>List</h1>
      <ul className="list-group">
        <li className="list-group-item">An item</li>
        <li className="list-group-item">A second item</li>
        <li className="list-group-item">A third item</li>
        <li className="list-group-item">A fourth item</li>
        <li className="list-group-item">And a fifth one</li>
      </ul>
    </>
  );


Take Home:
Fragments are a way to combine multiple HTML attributes into a react component.



---4 - Rendering Lists:---
So lets get started rendering some data!
In JSX there is no such thing as for loops, so we have to do things a bit differently.

Problem 1 - Convery Array to <li> items.
using the map function, we can return the array like so.
items.map((item) => <li>{item}</li>))


Problem 2 - We cant just insert this block into our JSX.
React wants to either call another react component or another HTML element.
It does not know what to do with our JavaScript code in the middle of our JSX

solution - parenthesis:
Our code can execute inside a parenthesis block.
return (
    <>
      <h1>List</h1>
      <ul className="list-group">
        {items.map((item) => (
          <li>{item}</li>
        ))}
      </ul>
    </>
  );
}


Problem 3 - no key property:
If we look in the console, we can see a warning no key provided!
React needs a unique key property to keep track of the elements, when we're getting data from an API
we should have an ID property, or in this case the names are unique, we can use the names themselves.

        {items.map((item) => (
          <li key={item}>{item}</li>
        ))}

note:
We did remove the classname from the LI, to the styling wemt. Fear not, this will be covered later.



---5 - Conditional Rendering:---
So in order to dynamically show/hide things we have a couple approaches.


Solution 1 - In JavaScript:
So we can add some logic, then return the correct message as required.
Problem with this solution is it leads to a lot of duplication.
  if (items.length === 0) return;
  <>
    <h1>List</h1>
    <p>No Items Found</p>
  </>;


solution 2 - In our JSX:
We can use ternary operators inside the JSX to show a section or render null
  <>
    <h1>List</h1>
    {items.length === 0 ? <p>No Items Found</p> : null}
    <ul className="list-group">
      {items.map((item) => (
        <li key={item}>{item}</li>
      ))}
    </ul>
  </>;
}


Solution 3 - Extracting Message to a Variable or function:
So when Conditionally rendering, we can use a constant for something simple.
  const message = items.length === 0 ? <p>No Items Found</p> : null;

Or for something more fancy we can use a function, because functions can take in parameters...
  const getMessage = () => {
    return items.length === 0 ? <p>No Items Found</p> : null;
  };


Code Optimization:
So the ternary operator with null is kind of nasty, we can abuse some comparison operators to achieve the same
results in less code.

combining a boolean value && a value, returns the value.
true && 1 - returns 1

So for us
items.length === 0 && <p> NO DATA!</p>

if its true, we get the resulting paragraph text.

This is REACT DEVELOPER TOP TIP. ABUSING operators.