
---Getting Started:---
What is React?
React is a JavaScript library for building dynamic & interactive user interfaces, created by facebook.

Why was it created?
As we know when a webpage is loaded, a tree like structure is created called the Document Object Model or DOM.
We can interact with the DOM to show/hide buttons & perforn complicated actions.
This quickly becomes difficult in larger applications, so this is where react comes into play.
-we no longer worry about DOM.
-we create a webpage using small modular components, and REACT will take care of updating the DOM.



---Setting up Development Environment:---
-node v16 or higher
-VS Code
-prettier extension



---Creating a React App:---
-Create Reace app (CRA)
-vite

vite has smaller bundle sizes, so we'll start with that.

Task 1 - Run the Vite project creation:
npm create vite@latest
or to stick to the same version as mosh, use this command.
npm create vite@4.1.0

-name react-app
-framework react
-variant - typescript

Result:
see the command output
  cd react-app
  npm install 
  npm run dev

We now have a starter project.


---Project structure:---

-node modules - all 3rd party libraries
-public - public assets of our website, picture, videos etc.
-src - source code of our app

Note:
There is only a single component, the app.tsx component.

-index.html is our boilet plate HTML generated by vite.

Note:
important thing to note here, the div root is the entry point to our react application
<div id="root"></div>

-package.json - our dependencies like react, & Development dependencies that wont be deployed with our app eg vite.
-ts.config - settings for typescript compiler
-vite.config - settings for vite

We wont really have to touch these files, that would be for advanced users.



---Creating a React Component:---
So we create a component using tsx, typescript using JSX.
JSX is a XML like language for JavaScript, that allows us to write some dynamic HTML easily.
We return the content as JSX, call the component & voila react.
Just a small note, we can create functions using classes or functions, the modern convention is to use functions
where as older react apps would be using classes.

Step 1 - Create a File - Message.tsx
Step 2 - Return Hello world, eg <h1>Hello World</h1>
Step 3 - export the new component

Step 4 - Use Component, update the App.tsx 
function App() {
  return (
    <div>
      <Message />
    </div>
  );
}

Step 5 - export the new App
export default App;

Now after refreshing the app, we can see the component in action.
If we want to add conditional logic or more interactivity its simple to modify the message.tsx.



---How React Works:---

When our react app starts, react takes our component tree and turns it into a JavaScript data structure called
the virtual DOM.
Its not the real DOM, but rather a lightweight in memory representation of our component tree, where each component
is a node, containing a component & its properties.

Comparison:
When the state of a comopnent changes, react updates the corresponding node with the new state.
It then compares the new & old virtual DOMS, to identify the changed nodes & make the corresponding change
in the REAL DOM.

Under the Hood:
Technically react does not update the DOM, but the library react-dom does this.



Example:
If we look in main.tsx we can see how this works.


ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

code breakdown:
-react DOM loads the tree
-find root
-render compoments inside the root.


Note:
So in this case the reactDOM is used to render the component tree in a web app, we can use react native to render
the app for mobile.
So react itself is platform agnostic, we can built it for web, mobile or desktop devices.


---React EcoSystem:---
So you've learned react is a JavaScript library for creating user interfaces,
unlike Angular & Vue, which are frameworks!

Library v Framework?
Library provides specific functionality where a framework is a set of tools and guidelines for building an app.
Think of it like a tool, and a toolset.
React ONLY builds UIs.
React does NOT care about what tools you use for Routing, Http, Managing app state, internationalization, 
form validation, animations etc.
It is more lightweight, and allows you to pick the right tool for the job.
