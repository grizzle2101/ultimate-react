---Section 5 - Managing State:---

---1 - Introduction:---
State managment is a fundamental concept in react.
So in this section we're going to take a deep dive into how component state is stored & updated.
This is crucial for building complex applications.



---2 - Understanding the state hook:---
So far we've learned we can use the state hook to add state to a component. A few things you probably didnt know..

1 - react updates state ascynchously (not immediately!)


Test Scenario:
If we create a button that updated the isVisible property, and log it directly after updating the value.
We STILL see the old value.

  const [isVisible, setVisability] = useState(false);

  const dummyOnClick = () => {
    setVisability(true);
    console.log("Visability - ", isVisible);
  };


This is done for performance reasons, in the real world we're going to be updating a lot of data.
So react batches them all togther and does less re-renders.


2 - State is stored outside of components

so we know in javascript variables are scoped locally. If we increment the count and the component re-renders,
we lose the update.
This is the whole reason we store items in scope, outside of the component!

function App() {
  const [isVisible, setVisability] = useState(false);
  let count = 0;

  const dummyOnClick = () => {
    setVisability(true);
    count++;
    console.log("Visability - ", isVisible);
  };


3 - use hooks at the top level of your component

The way react stores state means we have to be careful how we order our hooks.

  const [isVisible, setVisability] = useState(false);
  const [isApproved, setApproved] = useState(true);

The result of these stateHooks will be an array [false, true], which then gets reloaded into the react components
when they re-render.
If we mess up this order by putting them in conditional or nested blocks, we'll state to see the wrong state values
being given.



Take Home:
-react updates are async.
-state is stored outside
-hooks should only be in the top level of our components




---3 - Choosing the state structure:---
So when adding state to a component, its important to look at the strucure of the data.

Cases where we have similar data can be simplified
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [isLoading, setLoading] = useState(false);


TO:
const [person, setPerson] = useState({firstName, lastName});
const [isLoading, setLoading] = useState(false);



The important take home from this section is to avoid deeply nested data structures, as we'll soon find out, its very
difficult to update.
  const [person, setPerson] = useState({
    firstName,
    lastName,
    address: {
      street: {},
    },
  });



  Best Practies:
  -avoid redundant state variables
  -group related variables
  -avoid nested structures


  ---4 - PURE:---
A fundamental concept in react is purity, but what is it?

pure function - given the same input, always returns the same result.
const result = myFunc(1);
// result 'b'

if we get different results, at different times, we call this impure.

React is designed around this concept, it expects every component we create to be a PURE function.

props -> component -> JSX
same props -> skip re-rendering

Take Home:
The take home is keep any changes out of the render phase!

Example:
So say we have a message item that increments a count.

let countNumba = 0;

function Message({ children, count }: MessageProps) {
  countNumba++;
  return (
    <>
      <h1>count - {countNumba}</h1>
    </>
  );
}


Then we use the message component several times, we see a different result for each one!
This is the definition of an IMPURE function.
    <div>
      <Message count={2}>Test</Message>
      <Message count={2}>Test</Message>
      <Message count={2}>Test</Message>
    </div>
  

Refactor:
By simply moving the value down, its reset on each re-render.
Therefore our component produces the same result for each usage, voila!

function Message({ children, count }: MessageProps) {
  let countNumba = 0;
  countNumba++;
  return (
    <>
      <h1>count - {countNumba}</h1>
    </>
  );
}


---5 - Understanding STRICT Mode:---

Previously we got 2, 4 & 6. Why was that? Its to do with strict mode in react.


Strict Mode:
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


So in main.tsx we have 2 wrappers, reactDOM renders inside the browser, and another strict mode which is used to 
check the compoents.
So in development mode we actually render compoents twice, then react takes the last created instance to render.
This explains 2, 4 & 6, 1, 3 & 5 were not even used!


If we add a console log to the component, we can see this more clearly, 2 logs but only 1 comopnent shown!
note - this is only used in development mode, when we build for production strict mode is removed.
But for now in react 18, strict mode is there by default!


---6 - update objects:---
We want to create a button that increments the count, where do we store this?
Answer is NOT IN THE COMPONENT.

So lets take this Example, we have a drink state variables, we update it on click.
But what gives, no updates?

function App() {
  const [drink, setDrink] = useState({
    title: "Americano",
    price: 5,
  });

  const handleClick = () => {
    drink.price = 6;
    setDrink(drink);
  };

  return (
    <div>
      {drink.price}
      <Button onClick={handleClick}>Test Button</Button>
    </div>
  );
}

Solution:
We have to give react a new state object.
Like so, we create a newDrink & pass that, boom updates!

  const handleClick = () => {
    const newDrink = { title: drink.title, price: 6 };
    setDrink(newDrink);
  };


NOTE:
We should treat state as immutable, and instead of changing it we should re-initalize.


Top Tip:
Doing these updates to objects would be awfully painful when we just want to change something small.
Using the spread operator, we can make our life a bit easier.

  const handleClick = () => {
    setDrink({ ...drink, price: drink.price + 1 });
  };

Thats how you update state, from outside! with a new re-iniatilzed value!



---7 - updating nested objects:---
Taking the same example from before, we want to update an object onClick, except this time out address
is nested.



Problem 1:
...spread operator is shallow, meaning it does not copy the nested objects but instead returns a reference to it
in memory.
So this means the old & new version, will both reference the same object, not good!

    setCustomer({
      ...customer,
      customer.address.zipCode: 1234,
    });


Solution:
So we cant give a reference to the old object, we need to return as a new one.
Setting the address: field, means we are newly assigning, spreading the existing address, but modifying the zipcode!

    setCustomer({
      ...customer,
      address: { ...customer.address, zipCode: 1234 },
    });

This solution works, but is quite complex, so in future avoid nested structures.

Take Home:
When working with state objects, avoid deeply nested structures as it makes our job more difficult.
Prefer flat structures.



---8 - updating arrays:---
The same concept applies for arrays, we should not change or mutate it.


Task 1 - Adding:
We could do Tags.push but we would be modifying an array and thats a no go!
The better way is to copy the existing, add one and return as new object like so.

    setTags([...tags, "newOne"]);


Task 2 - Removing:
use filter to remove, and return result as new array.
    setTags(tags.filter((tag) => tag !== "happy"));

Task 3 - Update existing Items:
We have 2 methods for this.
method 1 - copy array
methood 2 - map

Map returns a new array, so this works perfectly!
    setTags(tags.map((tag) => (tag === "happy" ? "happiness" : tag)));



---9 - Updating array of objects:---
So say we have a list of bugs, and we want to set fixed to true, like we've just closed off a ticket.

bug object with 3 properties
  const [bugs, setBugs] = useState([
    { id: 1, title: "bug 1", fixed: false },
    { id: 2, title: "bug 2", fixed: false },
  ]);

find the bug using map operator, replace the item with a modified bug, or return bug as before.
Again this returns a new array, so we are not mutating anything we shouldn't.

  const handleClick = () => {
    setBugs(bugs.map((bug) => (bug.id === 1 ? { ...bug, fixed: true } : bug)));
  };


Old Array
B1, B2

New Array:
B1*, B2 - * meaning updated.

Take Home:
We don't need to modify every element in the array to get react to update the dom to reflect the component.
We only need 1 object to change to trigger the re-rendering.


---10 - Simplfying Update logic with Immer:---
So updating arrays & objects without mutation can be needlessly complex. A library called IMMER can help us with this.


Task - Duplicate Fixing a Bug:
import produce from "immer";

note:
draft is a proxy for the obect we want to update, it records the changes & returns a copy of our bugs.
now that we're using draft, we can operate on the value like we normally do! no weird object management.

Previous Code:
   setBugs(bugs.map((bug) => (bug.id === 1 ? { ...bug, fixed: true } : bug)));


Refactored Version:
  const handleClick = () => {
    setBugs(
      produce((draft) => {
        const bug = draft.find((bug) => bug.id === 1);
        if (bug) bug.fixed = true;
      })
    );
  };

Test:
To test the results of our changes, add some markup to render the bugs & their state.

      {bugs.map((bug) => (
        <p key={bug.id}>
          {bug.title} {bug.fixed ? "Fixed" : "New"}
        </p>
      ))}
      

Take Home:
if you don't like manipulating immutable data, immer is your friend!



---11 - Sharing State between components:---
So in modern apps we're going to need to share state between components, think of a navbar & shopping cart.
When we add or remove items we want them to be in sync.

Component Hierarchy:

      App
      
  NavBar  Cart



Task 1 - Create NavBar Component:
-take in itemCount as props


Task 2 - Create Cart Coponent:
-take in cartItems as string array
-render list item for each cart item.
-add a button to clear the shopping cart
-take in a function to allow the parent to manage state.


Nothing hard so far, lets try connect it all togther.

Note:
  The component that holds the state, is the one responsible for updating it.



Task 3 - Bring it all togther:
So on that note, we need to store state in the APP compoent, then pass in the count & items to the child components.
We also pass a function to manipulate the state once clicked.

function App() {
  const [cartItems, setCartItems] = useState(["one", "two", "three"]);

  const clearCart = () => {
    setCartItems([]);
  };

  return (
    <>
      <div>
        <NavBar cartItemsCount={cartItems.length}></NavBar>
        <Cart cartItems={cartItems} onClear={clearCart}></Cart>
      </div>
    </>
  );
}


Voila we have 2 synced components!



---Excercise:---
Task 1 - Update Game Player Name - simple update on nested Obj.
Task 2 - Update pizza toppings - modify array to add item.
Task 3 - update quanity - target a specific item & update


Take Home:
prefer to use immer, but its important to be comfotable writing update logic in the old way too.