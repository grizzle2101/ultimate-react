---6 - Connecting to the backend:---
So far we've dealt entirely with React, in the real world we're going to need to connect this to a backend to drive
the application.

Backend Frameworks:
-Express.js
-django
-ruby on rails
-spring
-asp.net core

Building out these backend is beyond the scope of this tutorial series, but we will learn how to integrate with them.



--2 - Understanding the Effect Hook:---
Before we can go into connecting backends, we really need to understand the effect hook.
Earlier we mentioned that react comnponents should be PURE, so provided the same input, should always
have the same output.

        Component:
props -> PURE -> JSX


To keep our Components pure, we have to keep any changes out of the render phase.
There are some scenarios where we might not want that to be the case.

-store data in local storage
-call to server to fetch/save data
-manually modify the DOM

So we cant perform these actions inside the component, thats where the EFFECT HOOK comes in.


UseEffect(() => {})
-to execute a piece of code AFTER the comopnent is rendered.


Example Scenario:
So say we want to focus on an input after the page loads.
So add this functionalty, our component becomes UNPURE. We are updating the state, and will experience side effects.

function App() {
  //ref hook
  const ref = useRef<HTMLInputElement>(null);

  //side effect
  if (ref.current) ref.current.focus();

  return (
    <>
      <div>
        <input ref={ref} type="text" className="form-control" />
      </div>
    </>
  );
}



Some notes on useEffect.
Just like other react hooks, we can only use it at the top level.
So need inside the JSX, loops or if statements.
We can also chain useEffects

  useEffect(() => {
    if (ref.current) ref.current.focus();
  });

  useEffect(() => {
    document.title = "My App";
  });


Take Home:
We use useEffect to modify components after they load, and to keep them pure.




---3 - Effect Dependencies:---



So say we have a product list, we want to simulate loading from a the data from a server.

Example One - UseEffect:
  useEffect(() => {
    console.log("fetching products....");
    setProducts(["clothing", "househole"]);
  });

  return <div>Product List:</div>;


  Result:
  So this useEffect is called a few hundred times, why?
  Because we update the state, which triggered a re-render which trigger another reload and so on! an infinite
  loop!
  Remember we should be using effect away from the component state!


 Lets get this running only once now!

UseEffect Dependencies:
So useEffect has a second parameter, variables we want to pass through each iteration.
It uses these to keep track of state, but if return an empty array it will only ever run once.
   useEffect(() => {
    console.log("fetching products....");
    setProducts(["clothing", "househole"]);
  }, []);

Result:
Congrats, no more infinite loops!


Example - Product Category selector:

-add a product Category selector & set state
 const [category, setCategory] = useState("");

 <select
        className="form-select"
        onChange={(event) => {
          console.log("event - ", event);
          setCategory(event.target.value);
        }}
      >
        <option value=""></option>
        <option value="Clothing">Clothing</option>
        <option value="Household">HouseHold</option>
      </select>

-set props on the productList to take in the Category value
function ProductList({ category }: { category: string }) {

-pass Category in app.tsx
<ProductList category={category} />


-take in state to useEffect:
So given the category, we pretend to fetch the latest products
  useEffect(() => {
    console.log("fetching products in...." + category);
    setProducts(["clothing", "househole"]);
  }, []);



So everything else works, but we dont get category?
The useEffect already ran ONCE, remember? We need to update the useEffect Dependencies.

Fix:
We need to specify the values which trigger our change, so when category changes we re-exectute!
  useEffect(() => {
    console.log("fetching products in...." + category);
    setProducts(["clothing", "househole"]);
  }, [category]);




Take Home:

-NOT providing Dependencies will rerun on EVERY change.
  useEffect(() => {
    console.log("fetching products in...." + category);
    setProducts(["clothing", "househole"]);
  });

-EMPTY bracks will only run once []

-specifying a value means we ONLY execute when that item changes.
  useEffect(() => {
    console.log("fetching products in...." + category);
    setProducts(["clothing", "househole"]);
  }, [category]);


-we can obviously pass in more complex nested object dependencies, will cover this more in depth later.



--- 4 - Effect Clean Up:---
So say we're connecting to a chat server, we need to terminate & clean up when we're done,
How do we go about this?


Task 1 - create 2 functions to simulate connecting & disconnecting:
  const connect = () => console.log("connecting...");
  const disconnect = () => console.log("disconnecting...");


Task 2 - Update useEffect:
optionally useEffect allows us to return a function, which is exectuted on completion.
  useEffect(() => {
    connect();

    return () => disconnect();
  }, []);


Note:
this is exectuted twice, again becuase of STRICT mode in react.

So if connect was an observable subscription, we might unsubscribe in the disconnect function.
-unsubscribe
-close modal
-abort fetch for data



--- 5 - Fetching Data:---
So we're going to connect to a dummy backend, json placeholder.
https://jsonplaceholder.typicode.com/

How are we going to get the data? We can use fetch in the browser, or axios is what many developers go to.


Task 1 - install axios:
npm install axios@1.3.4


Task 2 - create users state to hold the data.
-create users state object.
 const [users, setUsers] = useState<User[]>([]);
 
-define an interfact for the data.
  interface User {
    id: number;
    name: string;
  }



Task 3 - use Axios:
-use axios.get() to fetch our data.
-axios returns a promise, use .then to access data via callback function.
-Then set users using the resulting data.

  useEffect(() => {
    axios
      .get<User[]>("https://jsonplaceholder.typicode.com/users")
      .then((res) => {
        setUsers(res.data); //update state w response.
      });
  }, []);

Note:
Remember the importantance of the empty dependency [], this ensures it only runs once, and doesn't bombard the server.

Task 4 - Render the data:
  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}> {user.name}</li>
      ))}
    </ul>
  );
}



--- 6 - understanding HTTP requests:---
Its important to understand what goes on when we do a get request with AXIOS.


sends a get over HTTP
browser -(request)-> server
browser <-(response )- server
going into the network tab we can filter by fetch/XHR

Note:
Again we have 2 requests becuase we are developing with STRICT mode.

What are the components of a request?
request method - GET
request headers - metadata
body - container for the data
response headers

We will cover this more in depth as needed, including different HTTP methods to update & delete records.



--- 7 - Handling Errors:---
So every developer needs to anticipate errors, how do we handle this in react?
Every promist object in JavaScript has a catch block, we pass in a call back function here.


Task 1 - catch Error:
to simulate network error, see the x in the URL.

  axios
      .get<User[]>("https://jsonplaceholder.typicode.com/usersx")
      .then((res) => {
        setUsers(res.data);
      })
      .catch((err) => {
        setError(err.message);
      });


Task 2 - Display Error to end user:
store the error is a state variable.
  const [error, setError] = useState("");


Modify the display. remember our trick to conidtionally render a section error &&.
Meaning if we have an error return part 2.
 <>
      {error && <p className="text-danger">{error}</p>}



--- 8 - Working with Async & Await:---
Then & catch is not a very popular way of coding, lets check out another way.


Step 1 - Basic Setup:
So couple caveats here.
To use await, we need to define the method as async, with react we cannot do this.
The workaround is to create a function inside, which is markes as async.

useEffect(() => {
  // create async function
    const fetchUsers = async () => {
     const res = await axios.get<User[]>(
          "https://jsonplaceholder.typicode.com/users"
        );
        setUsers(res.data);
    };

  // call the function
    fetchUsers();
  }, []);



Step 2 - Adding Error Handling:
So with async & await we need a try catch block.
-try to do the async call
-catch the error & set errors
useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await axios.get<User[]>(
          "https://jsonplaceholder.typicode.com/users"
        );
        setUsers(res.data);
      } catch (error) {
        setError((error as AxiosError).message);
      }
    };
    fetchUsers();
  }, []);


  Take Home:
  This approach does work, but is leads to a a fair amount of overhead, creating an async function inside, try & catch
  then invoking it, casting the error to a type we can erro handle. Is there a cleaner way?


Compare the Code:
In the previous tutorial, using then & catch, what is more readable?
For simplicitys sake we're going to stick with then & catch

  axios
      .get<User[]>("https://jsonplaceholder.typicode.com/usersx")
      .then((res) => setUsers(res.data))
      .catch((err) => setError(err.message);
      );


---9 - Cancelling a fetch Request:---
So earlier we mentioned cleaning up the useEffect, what happens if the user navigates away while
we're fetching data?


Note:
By convention, when we do a fetch inside a useEffect, we should also clean it up!



Example:
-abort controller is a browser feature to abort an action.
-pass this into the axios configuration via signal property.
-return the cleanup function at the end.

 useEffect(() => {
    //part of browser
    const controller = new AbortController();

    axios
      .get<User[]>("https://jsonplaceholder.typicode.com/users", {
        signal: controller.signal,
      })
      .then((res) => setUsers(res.data))
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setError(err.message);
      });

    //cleanup function
    return () => {
      controller.abort();
    };
  }, []);

Note:
Error is being set on load, we need to clean this up by checking if it was a cancellation.


Note:
Because the strict mode, our first component is created & killed very quickly, this is like a user clicking
away, which works perfectly for us!
We can see the first users call is cancelled.


---10 - showing a loading indicator:---
So the simplest way to show a loading indicator is to store isLoading variable, and dynamically show
the bootstrap loader.


Step 1 - Add Loading Variable:
  const [isLoading, setLoading] = useState(false);

useEffect(() => {
    const controller = new AbortController();
    setLoading(true);


note:
The simplest way would be to have a finally block, if the promise succeeds or fails we update isLoading.
But for some reason, finally & setState does not seem to work.
      .finally(() => {
        console.log("finally!");
        setLoading(false);
      });
      



Step 2 - Update Logic in then & catch.
useEffect(() => {
    const controller = new AbortController();
    setLoading(true);

    axios
      .get<User[]>("https://jsonplaceholder.typicode.com/users", {
        signal: controller.signal,
      })
      .then((res) => {
        setLoading(false);
        setUsers(res.data);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setLoading(false);
        setError(err.message);
      });


Step 3 - render loader:
 {isLoading && <div className="spinner-border"></div>}



---11 - Deleting Data:---
So to start with deleting data, we need to create a button & update our UI & backend to reflect the changes.




Task 1 - Update the UI:
-use the bootstrap flex classes to make the list look nice.
-add button with onClick function.
      <ul className="list-group">
        {users.map((user) => (
          <li
            className="list-group-item d-flex justify-content-between"
            key={user.id}
          >
            {user.name}
            <button
              className="btn btn-outline-danger"
              onClick={() => deleteUser(user)}
            >
              Delete
            </button>
          </li>
        ))}
      </ul>



Task 2 - delete function:
We have 2 choices for deleting, we can use optimistic or pessimistic updates.
optimistic - update the UI, call the server. (faster)
pessimistic update - call the server, update the UI. (slower)

-using optimistic updates
-store users incase we have to revert.
-delete + id of user
-finally catch the errors & reset if needed.

  const deleteUser = (user: User) => {
    const originalUsers = [...users];

    setUsers(users.filter((u) => u.id !== user.id));
    axios
      .delete("https://jsonplaceholder.typicode.com/xusers/" + user.id)
      .catch((err) => {
        setError(err.message);
        setUsers(originalUsers);
      });
  };


---12 - Creating Data:---
So creating data is quite straight forward, we're not going to bother building a form as we already covered that.



Task 1 - create button:
      <button className="btn btn-primary mb-3" onClick={addUser}>
        Add
      </button>


Task 2 - Create the Function:
-optimistic update
-store user incase failure.
-
  const addUser = () => {
    const originalUsers = [...users];
    const newUser = { id: 0, name: "Conor" };

    setUsers([...users, newUser]);

    axios
      .post("https://jsonplaceholder.typicode.com/xusers/", newUser)
      .then((res) => setUsers([res.data, ...users]))
      .catch((err) => {
        setError(err.message);
        setUsers(originalUsers);
      });
  };


  Task 3 - Clean up Code:
  We can use object destructuring to make it more clear its savedUser & the initial users geing posted.

      .then(({ data: savedUser }) => setUsers([savedUser, ...users]))



Note:
We get an error with duplicated keys, this is because we are using a fake backend.
Any new user is given the id 11, but we're using key as a unique key for the list, which blows up.
Ignore this for now, wont be a problem with a working backend.


---13 - Updating Data:---
Rinse & repeat here, only difference is the axios PATCH call.


Note - PUT & PATCH:
PUT will replace an existing object, where PATCH is used for modifying some properties on an object.
Not all backends support PATCH, so it will vary in the real world.



Task 1 - Add Update Button:
-to fix alignment issue, put buttons in a div.
-mx 1 means horizontal margin 1
-call updateUser
  <div>
              <button
                className="btn btn-outline-secondary mx-1"
                onClick={() => updateUser(user)}
              >
                Update
              </button>

              <button
                className="btn btn-outline-danger"
                onClick={() => deleteUser(user)}
              >
                Delete
              </button>
            </div>



Task 2 - Patch:
-store users incase failure.
-create user by spreading & modifying name.
-update user list, then call AXIOS PATCH (optimistic update)

  const updateUser = (user: User) => {
    const originalUsers = [...users];
    const updatedUser = { ...user, name: user.name + "!" };

    setUsers(users.map((u) => (u.id === user.id ? updatedUser : u)));

    axios
      .patch(
        "https://jsonplaceholder.typicode.com/users/" + user.id,
        updatedUser
      )
      .catch((err) => {
        setError(err.message);
        setUsers(originalUsers);
      });
  };



---14 - Extracting to Reuseable API:---
So our code has grown, nows a good time to clean up. We can start to extract any duplication & similar functions.


So to get started we can centralize the axios configuration, then modify it as needed in each compnent.

Task 1 - Setup config.
-create config file api-client
-configure base URL and other things as needed.
export default axios.create({
  baseURL: "https://jsonplaceholder.typicode.com",
  //where we configure server settings
  //headers: {'api-key': '...'}
});



Task 2 - Refactor Component:
So we can replace all references to AXIOS with our API object.

apiClient
      .get<User[]>("/users", {
        signal: controller.signal,
      })
      .then((res) => {
        setLoading(false);
        setUsers(res.data);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setLoading(false);
        setError(err.message);
      });


Next we will look at extracting more of the HTTP work.



---15 - Extracting to a User Service:---
So our comopnent knows about cancelling requests, it knows about endpoints and HTTP, this is too much!
Seperation of concerns, the component should only focus on its primary responsibility.




Task 1 - Extract getUsers:
-the user interface belongs in this service.
-we still want the abort functionalty contained in the service, incase we ever need to cancel.
-we return an object that encapsulates the request, and the logic for cancelling.

export interface User {
  id: number;
  name: string;
}

class UserService {
  getAllUsers() {
    const controller = new AbortController();

    const request = apiClient.get<User[]>("/users", {
      signal: controller.signal,
    });

    return { request, cancel: () => controller.abort() };
  }
}

export default new UserService();




Result:
-destructure request & cancel functionalty as needed.
-call request.getAllUsers for loading.
-then return the cancel function (will get exectuted in the event of components destruction).

    const { request, cancel } = userService.getAllUsers();

    request
      .then((res) => {
        setLoading(false);
        setUsers(res.data);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setLoading(false);
        setError(err.message);
      });

    return () => {
      cancel();
    };

Excercise:
Complete this extraction for the remaining DELETE & PUT calls.



---16 - Creating Generic HTTP Service:---
So if we look at creating a post endpoint for a new object, its going to look almost identical to the one we justify
created. So it probaly makes sense to start creating generic HTTP services.


Task - create Generic functions:
-make every function name generic eg getAllUsers becomes getAll.
-use a saved endpoint to allow users to customize.

  getAll<T>() {
    const controller = new AbortController();

    const request = apiClient.get<T[]>(this.endpoint, {
      signal: controller.signal,
    });

    return { request, cancel: () => controller.abort() };
  }

    delete(id: number) {
    return apiClient.delete(this.endpoint + id);
  }

  create<T>(entity: T) {
    return apiClient.post(this.endpoint, entity);
  }


Task - Add ID Constraint:
SO we get a complain on the entity.id as the compiler knows ID isn't required by T generic class. So we need
to make a change for that.

-define the Entity Interface w Id.
interface Entity {
  id: number;
}


-generic item MUST inherit ENTITY & implement id.
  update<T extends Entity>(entity: T) {
    return apiClient.patch(this.endpoint + "/" + entity.id, entity);
  }


Task - Pass in Endpoint:
so we want users to pass in their endpoint URL, we can do it like so.
-save endpoint
-constructor to set value.
-export create function, which exports instance of service, with URL saved.

class HttpService {
  endpoint: string;

  constructor(endpoint: string) {
    this.endpoint = endpoint;
  }


const create = (endpoint: string) => new HttpService(endpoint);



Task - update UserSerive Implementation:
So where we want to create a user service, we specify the endpoint, and have our user model.
import create from "./http-service";

export interface User {
  id: number;
  name: string;
}

export default create("/users");



--- 17 - Creating Data Fetching Hook:---
So imagine we have a need to fetch the list of users elsewhere in the application.
If we duplicate this code we have to
-duplicate state variables for user data, errors & loading.
-duplicate data retrival & error handling.

A Fetch hook is a great way to modularize getting the users data by extracting it into our own hook.


Task - create custom Hook:
-create useUsers.ts file (convention is the word useX)
-extract all the state variables, loading & error handling logic.

const useUsers = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [error, setError] = useState("");
  const [isLoading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);
    const { request, cancel } = userService.getAll<User>();

    request
      .then((res) => {
        setLoading(false);
        setUsers(res.data);
      })
      .catch((err) => {
        if (err instanceof CanceledError) return;
        setLoading(false);
        setError(err.message);
      });

    return () => {
      cancel();
    };
  }, []);

  //return state variables for use in component.
  return { users, error, isLoading, setUsers, setError };
};

export default useUsers;



Result:
Every function can be exports & used in the app.ts, while the Implementation is hidden in our hook file.

  const { users, error, isLoading, setUsers, setError } = useUsers();

  const deleteUser = (user: User) => {
    const originalUsers = [...users];

    setUsers(users.filter((u) => u.id !== user.id));