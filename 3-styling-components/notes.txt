---Styling Components:---
---1 - introduction:---
In this section we'll look at various methods for styling our components.

-vanilla css
-css modules
-css in JS
-using css libraries


---2 - Vanilla CSS:---
So vanilla css is not something we should do all too often, its time consuming & tedious.
But incase you ever need to, lets show you how its done.


Step 1 - remove bootstrap:
remove the import from main.tsx
import "bootstrap/dist/css/bootstrap.css";


step 2 - create css file.
create ListGroup.css in the same location as the ListGroup compoent.

Note:
Should styles be kept seperately? No. We want to achieve cohesion, so related things should be kept togther.


Step 3 - import:
import "./ListGroup.css"; add the style import into the ListGroup.tsc file.


Top Tip:
To avoid messy imports of multiple items associated with the ListGroup we can create an index file.
This is like a table of contents for everything ListGroup related.

created index file:
2 lines of code in the index file.

import ListGroup from "./ListGroup";
export default ListGroup;


Then look at the cleaner imports
import ListGroup from ".components/ListGroup/ListGroup";
to
import ListGroup from "./components/ListGroup";

By default, if we do not provide a file, the typescript compiler looks for index.ts, which tells us which file is
the default import.



Sidenote:
We also updated the git ignore to avoid the huge node_modules
note - git ignore node modules


TakeHome:
To use vanilla CSS, add a CSS file with the component.
Import the CSS in into the TSX file
Simple as.


---3 - CSS Modules:---
The problem with Vanilla CSS is when we have dupliactes of the same class name, we're going to have clashes!


Problem:
So if we add some styling into our global css, and have something different in the listgroup component.
.list-group {
  background: red;
}

We can see this causes a clash.

Solution:
CSS Modules allow us to scope these class locally!


Step 1 - rename listgroup to ListGroup.module.css


Step 2 - import like a javascript object
import styles from "./ListGroup.module.css";

note:
styles is the oject, list-group class will be a property.



Step 3 - Usage:
So after the import we can access the styles object.
One note is that we cannot use a hyphen, so we dot notation wont work, we have use square brackets.
    <ul className={styles["list-group"]}>

OR
using camel notation
  <ul className={styles.listGroup}>


Under the hood:
If we inspect the Cities, we can see we get list-group-xyzb
This is how vite bundles our CSS module & assigns a unique ID to the class so there will never be a clash.

So instead we use CAMEL NOTATION when using CSS bundles.

.listGroup {
  list-style: none;
  padding: 0;
}


How to add multiple classes?
So we have an array of objects, then join them with spaces to achieve the desired result.
      <ul className={[styles.listGroup, styles.container].join(" ")}>



---4 - CSS in JS:---
So another controversial technique is CSS in JS, some like it some aboslutely hate it.
We write the CSS classes directly in our javascript/typescript file.

Benefits:
-scoped styles (just like modules)
-all CSS & JS/TS  code in one place
-easier to delete a component (without knock on to others using that CSS)
-easier to style based on props/state

Some common libraries that use this approach are:
-styled Components
-emotion
-polished
etc


lets check out styled components.

Step 1 - install it:
npm install styled-components


Note:
after installing styled-compoents we're getting an error on the import.
The compiler does not know what type of objects are defined in this library.
fix - install type definitions
npm install @types/styled-components


Step 2 - Define the Style:
Styled has properties for almost every HTML attribute.
What we do is we create a react component, specify the style in-line here, then use the component.
const List = styled.ul`
  list-style: none;
  padding: 0;
`;



Step 3 - Use:
So where we previously used <UL> we now use the newly created react component LIST.
      <List>
        {items.map((item, index) => (
          <ListItem
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={() => {
              setSelectedIndex(index);
              onSelectItem(item);
            }}
          >
            {item}
          </ListItem>
        ))}
      </List>

  

Take Home:
So after doing this excercise we can hopefully see the benefits of CSS-in-JS.
Our markup is now only structure & logic for our components, we've extracted any style elements out.
And it tomorrow we dont want this, we can just delete this file without fear of knock on effects.



Styling based on props/state:
So say we want to remove all the conditional logic here for active items. styled-components make this
much easier.
<ListItem
            className={
              selectedIndex === index
                ? "list-group-item active"
                : "list-group-item"
            }
            key={item}
            onClick={() => {
              setSelectedIndex(index);
              onSelectItem(item);
            }}
          >
          
Step 1 - Set Active property on ListItem:
<ListItem
            active={index === selectedIndex}

Step 2 - Then Modify our state, to trigged the action.
  const [selectedIndex, setSelectedIndex] = useState(2);


Step 3 - define props:
So we have a compilation error, compiler does not know this property active, we need to add it.
Create the interface.
interface ListItemProps {
  active: boolean;
}


Step 4 - Pass Props to styled comopnent:
Takes a generic type, in our case the ListItem props.
const ListItem = styled.li<ListItemProps>`


Then we can use template literals to assign blue or none depending on props.
const ListItem = styled.li<ListItemProps>`
  padding: 5px 0;
  background: ${(props) => (props.active ? "blue" : "none")};
`;


Finally:
If the selectedItem(2) is there, should return blue!


Take Home:
styled-components let us deine CSS as javascript/typescript.
-We use styled.<HTML-component> to create a react like comopnent.
-we add the styling in line
-we replace HTML in the compoent with our newly created/styled component.
-we can add props to allow for easy conditionl styling.
-finally we can delete the code without fear of knock on.
-every bit of logic for the component is contained in one file, handy!




---5 - Seperation of Concerns:---
An important design principle in software design is seperation on concerns.

Seperation of Concern definition:
Divide a program into distinct sections where each section handles a specific functionality, rather than everything
in one place.

If we use this principle our code will be.
-more modular
-easier to understand
-easier to maintain
-easier to Modify

We can also test & build this modules indepently.
The complexity of our code should be hidden behind a well defined interface.


Some say CSS in JS violates this principle by having everything in one file. (styles, markup & logic),
however others say it doesn't becuase we do indeed have a well defined interface, our ListGroupItem has an interface,
the consumer (the list group) just uses active, and the complexity is indeed hidden.
So this is why CSS in JS is controversial, a differing opinion.


---6 - Inline Styles:---
So inline styling is not something we want to go into in detail, because its really a bad practice.
But if you ever have to, its just a matter of adding the style property, then using {{}} to insert the CSS.
note that its camel case, not like regular css background-color.


Example:
      <ul className="list-group" style={{ backgroundColor: "green" }}>


  
---7 - Popular UI libraries:---

-bootstrap - east
-material UI - react component library, in the google design language
-tailswind css - utility first CSS library, doesn't give us full components but small functions.


Utility Class examples:
Say we want to add the css to remove the list styling, rather than creating the class we use the built in tailswind
ones to achieve the same results

-list-group or list-none (tailwind version)
-p-0 - add 0 padding to a section

Downside:
As we begin to add more utility classes to our HTML, it starts to look a bit nasty.
There are frameworks that seek to minimize the bloat like
-daisyUI
-chakraUI

DaisyUI looks much like bootstrap, but has all the essential components e.g.
alert alert-warning 

going forward, we will be using chakraUI to build the project for this course.