---Routing with React Router:---
In this section we'll go over routing, which is a way for allowing a user to go from one page to another using React Router.

You'll learn:
-setting up routes
-handling errors
-navigating between pages
-dynamic routes
-nested routes
-private routes



---Setting up Routing:---
So to setup routes in the application we'll need to download react router, configure & bootstrap it into the app.

Task 1 - install react router:
npm install react-router-dom@6.10.0


Task 2 - Configure router:
So just like in Angular, we have an array of route objects with path & components to be used at that route.
const router = createBrowserRouter([
    {path: '/', element: <HomePage />},
    {path: '/users', element: <UserListPage />}
]);


export default router;


Task 3 - Initialize Router Context in main.tsx
ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
      <ReactQueryDevtools />
    </QueryClientProvider>
  </React.StrictMode>
);


Result:
Now we have a homepage, and a users page.



---Navigation:---
The problem with anchor tags, is that we get a full page reload on clicking of a link.
We want to swap out the innter content, without triggering a reload.


Hard Link:
The link attribute is included with react router, it has access to the userList component as its already shipped to the client.
So we dont have to do that annoying reload.
-to = target url
 <Link to="/users">Users</Link>
      <br />
 <a href="/users">Users</a>


Programatically Link:
Say we want to send users to different locations based on a form, we can also do this with react router.
-navigate(URL) and voila we return to the homepage

     <form
      onSubmit={(event) => {
        event.preventDefault();
        // Redirect the user to the home page
        navigate('/');
      }}


Take Home:
We can use Link to switch pages without a reload, or use navigate(URL)
to Programatically navigate.