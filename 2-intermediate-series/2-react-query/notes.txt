Introduction:
We're going to explore fetching data with react query.
part 1 - querying data
-fetch data
-handle errors
-implement pagination
-implement infinite queries
-debug queries with react dev tools

part 2 - mutating data
-handle CRUD operations
-optimistic updates
-create custom hooks


part 3:
practical excercises, enhancing gamehub with what we have learned.


What is react query?
If we look at an example of the previous implementation on fetching data, we can see the steps required
-declare useState to store the data.
-useEffect to run fetch the data

const TodoList = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [error, setError] = useState('');

  useEffect(() => {
    axios
      .get('https://jsonplaceholder.typicode.com/todos')
      .then((res) => setTodos(res.data))
      .catch((error) => setError(error));
  }, []);

There are a couple issue with this implementation, like this
-no request cancellation
-no seperation on concerns or reuseability
-no retries
-no automatic refresh - have to refresh to see these changes
-no caching

We can implement these features, but it starts to get very messy.
React query is a library for managing data fetching & caching in react applications, this will make our lives
much easier.

Redux is another popular caching library, which uses a centralized store to hold a single collection of the global
data & state.

Redux V react query:
redux:
-difficult to learn
-much boilerplate code

react query:
-much simpler
-more lightweight

In many cases redux is no longer needed, at least for caching.
There certainly are still uses in more complex applications with shared data, like a chat app etc.


setting up react query?
npm i @tanstack/react-query@4.28

Add to main.tsx:
We import the client & query provider, newup the client & pass to query client provider like so.
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient();

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
    <App />
    </QueryClientProvider>

In the next lectures we'll start using it to fetch some data.


---Fetching Data:---
So similar to useState, we have useQuery, where we pass key for storing the data, and a function
to return the data.

Step 1 - useQuery:
  const { data: todos } = useQuery({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });

This gives is a query object with lots of the state data we had previously like loading.
implement the fetch function, can be axios or any other library doesn't matter.

Step 2 - implement fetch:
  const fetchTodos = () => {
    return axios
      .get<Todo[]>("https://jsonplaceholder.typicode.com/todos")
      .then((res) => res.data);
  };


Step 3 - use it:
Just like before we take the .data from the the results, or destructure & rename like so.
      {todos?.map((todo) => (
        <li key={todo.id} className="list-group-item">
          {todo.title}
        </li>


What benefits do we get from this approach?
-retry mechanism
-caching of data
-auto refresh (configureable)


---Handling Errors:---
So reactQuery already has an error object, we just need to destructure it and also provide the error type.

So to make the error object useable, we need to define 2 things.
The return type of a success response, and also the error object in case of failure.

  const { data: todos, error } = useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });


Error Usage:
just as before, if we have an error display it.
  if (error) return <p>{error.message}</p>;


If we place an X in the URL, we'll see the multiple retries, and the eventual error handling kicking in!
Easy as that.


---showing loading indicator:---
So just like the error lecture, we can export isLoading & use it in the template.
Simple as that.



---Creating a Custom Query Hook:---
So the best way to achieve seperation of concerns here is to create a custom hook.

Step 1 - Create useTodos query:
We just have to extract any query logic into useTodos hook and return the resulting query.
  return useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });


Step 2 - usage:
All the functions, interfacts & query logic has been moved out, we just have 1 line to call function.
  const { data: todos, error, isLoading } = useTodos();


---Using react query dev tools:---
react query comes with some great dev tools, this will allow us to see data in the cache, numbers of observers,
as well as buttons to force certain actions eg loading, errors etc and test the component state.
This should only be included in the development version of our app.
It even has properties for our query, including cache time which we will learn to change next.

Install Dev tools:
 npm i @tanstack/react-query-devtools@4.28

Add to Main.tsx:
</QueryClientProvider>



---Customizing Querying Settings:---
So the handy part of using react query, is we can make customizations per query or globally.

Global Settings:
for the most part the defaults are okay, the only thing we might change is stale time.

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 3,
      cacheTime: 300_000,
      staleTime: 10 * 1000,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
      refetchOnMount: false,
    },
  },
});

There are a couple scenarios where the data will automaticly refresh stale data.
-when network is reconnected
-when a component is mounted
-when the window is refocused


Settings per query:
Again this is very easy to customerize per query, in useQuery we pass the stateTime setting for the todos list.
  return useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
    staleTime: 10 * 1000,
  });



---Excercise - fetching data:---
implement the posts component with a custom hook.



---parameterized queries:---
So we want to get posts per user, how do we modify the app to do this?
task 1 - create dropdown for user

      <select
        className="form-select mb-3"
        value={userId}
        onChange={(event) => {
          setUserId(+event.target.value);
        }}
      >


task 2 - store that in state variable
  const [userId, setUserId] = useState<number>();

task 3 - pass userId to usePosts
  const [userId, setUserId] = useState<number>();

task 4 - build query for fetch posts per user:
we need to store the cached data in the correct format, eg users/1/posts
  return useQuery<Post[], Error>({
    queryKey:  ["users", userId, "posts"],
    queryFn: fetchPosts,
  });


Problem:
When we get all users, the cache key appears with a null.
users, null, posts.
To fix this, we can add some logic to the queryKey, if userId use it in storage key.

queryKey: userId ? ["users", userId, "posts"] : ["posts"],


task 5 - add userId to query:
add the params object, with the userId & test this thing out
    return axios
      .get<Post[]>("https://jsonplaceholder.typicode.com/posts", {
        params: {
          userId,
        },
      })
      .then((res) => res.data);
  };


result:
when we select a user we get all posts for that user.

Take Home:
react query makes our application insanely fast by caching the previous queries, meanwhile it fetches
any newer posts. To do this ourselves would be very complex.