Introduction:
We're going to explore fetching data with react query.
part 1 - querying data
-fetch data
-handle errors
-implement pagination
-implement infinite queries
-debug queries with react dev tools

part 2 - mutating data
-handle CRUD operations
-optimistic updates
-create custom hooks


part 3:
practical excercises, enhancing gamehub with what we have learned.


What is react query?
If we look at an example of the previous implementation on fetching data, we can see the steps required
-declare useState to store the data.
-useEffect to run fetch the data

const TodoList = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [error, setError] = useState('');

  useEffect(() => {
    axios
      .get('https://jsonplaceholder.typicode.com/todos')
      .then((res) => setTodos(res.data))
      .catch((error) => setError(error));
  }, []);

There are a couple issue with this implementation, like this
-no request cancellation
-no seperation on concerns or reuseability
-no retries
-no automatic refresh - have to refresh to see these changes
-no caching

We can implement these features, but it starts to get very messy.
React query is a library for managing data fetching & caching in react applications, this will make our lives
much easier.

Redux is another popular caching library, which uses a centralized store to hold a single collection of the global
data & state.

Redux V react query:
redux:
-difficult to learn
-much boilerplate code

react query:
-much simpler
-more lightweight

In many cases redux is no longer needed, at least for caching.
There certainly are still uses in more complex applications with shared data, like a chat app etc.


setting up react query?
npm i @tanstack/react-query@4.28

Add to main.tsx:
We import the client & query provider, newup the client & pass to query client provider like so.
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const queryClient = new QueryClient();

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
    <App />
    </QueryClientProvider>

In the next lectures we'll start using it to fetch some data.


---Fetching Data:---
So similar to useState, we have useQuery, where we pass key for storing the data, and a function
to return the data.

Step 1 - useQuery:
  const { data: todos } = useQuery({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });

This gives is a query object with lots of the state data we had previously like loading.
implement the fetch function, can be axios or any other library doesn't matter.

Step 2 - implement fetch:
  const fetchTodos = () => {
    return axios
      .get<Todo[]>("https://jsonplaceholder.typicode.com/todos")
      .then((res) => res.data);
  };


Step 3 - use it:
Just like before we take the .data from the the results, or destructure & rename like so.
      {todos?.map((todo) => (
        <li key={todo.id} className="list-group-item">
          {todo.title}
        </li>


What benefits do we get from this approach?
-retry mechanism
-caching of data
-auto refresh (configureable)


---Handling Errors:---
So reactQuery already has an error object, we just need to destructure it and also provide the error type.

So to make the error object useable, we need to define 2 things.
The return type of a success response, and also the error object in case of failure.

  const { data: todos, error } = useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });


Error Usage:
just as before, if we have an error display it.
  if (error) return <p>{error.message}</p>;


If we place an X in the URL, we'll see the multiple retries, and the eventual error handling kicking in!
Easy as that.


---showing loading indicator:---
So just like the error lecture, we can export isLoading & use it in the template.
Simple as that.



---Creating a Custom Query Hook:---
So the best way to achieve seperation of concerns here is to create a custom hook.

Step 1 - Create useTodos query:
We just have to extract any query logic into useTodos hook and return the resulting query.
  return useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
  });


Step 2 - usage:
All the functions, interfacts & query logic has been moved out, we just have 1 line to call function.
  const { data: todos, error, isLoading } = useTodos();


---Using react query dev tools:---
react query comes with some great dev tools, this will allow us to see data in the cache, numbers of observers,
as well as buttons to force certain actions eg loading, errors etc and test the component state.
This should only be included in the development version of our app.
It even has properties for our query, including cache time which we will learn to change next.

Install Dev tools:
 npm i @tanstack/react-query-devtools@4.28

Add to Main.tsx:
</QueryClientProvider>



---Customizing Querying Settings:---
So the handy part of using react query, is we can make customizations per query or globally.

Global Settings:
for the most part the defaults are okay, the only thing we might change is stale time.

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 3,
      cacheTime: 300_000,
      staleTime: 10 * 1000,
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
      refetchOnMount: false,
    },
  },
});

There are a couple scenarios where the data will automaticly refresh stale data.
-when network is reconnected
-when a component is mounted
-when the window is refocused


Settings per query:
Again this is very easy to customerize per query, in useQuery we pass the stateTime setting for the todos list.
  return useQuery<Todo[], Error>({
    queryKey: ["todos", { completed: true }],
    queryFn: fetchTodos,
    staleTime: 10 * 1000,
  });



---Excercise - fetching data:---
implement the posts component with a custom hook.



---parameterized queries:---
So we want to get posts per user, how do we modify the app to do this?
task 1 - create dropdown for user

      <select
        className="form-select mb-3"
        value={userId}
        onChange={(event) => {
          setUserId(+event.target.value);
        }}
      >


task 2 - store that in state variable
  const [userId, setUserId] = useState<number>();

task 3 - pass userId to usePosts
  const [userId, setUserId] = useState<number>();

task 4 - build query for fetch posts per user:
we need to store the cached data in the correct format, eg users/1/posts
  return useQuery<Post[], Error>({
    queryKey:  ["users", userId, "posts"],
    queryFn: fetchPosts,
  });


Problem:
When we get all users, the cache key appears with a null.
users, null, posts.
To fix this, we can add some logic to the queryKey, if userId use it in storage key.

queryKey: userId ? ["users", userId, "posts"] : ["posts"],


task 5 - add userId to query:
add the params object, with the userId & test this thing out
    return axios
      .get<Post[]>("https://jsonplaceholder.typicode.com/posts", {
        params: {
          userId,
        },
      })
      .then((res) => res.data);
  };


result:
when we select a user we get all posts for that user.

Take Home:
react query makes our application insanely fast by caching the previous queries, meanwhile it fetches
any newer posts. To do this ourselves would be very complex.



---paginated queries:---
So we want to paginate data, very simlar process to previous lecture.

task 1 - store page data
  const pageSize = 10;
  const [page, setPage] = useState<number>(1);


task 2 - pass data to usePosts
  const { data: posts, error, isLoading } = usePosts({ page, pageSize });


task 3 - modify usePosts to take in page query object:
-querykey will be posts/{page: x, pageSize: y}
-start & limit are page & pageSize
const usePosts = (query: PostQuery) => {
  const fetchPosts = () => {
    console.log("getting...", query);
    return axios
      .get<Post[]>("https://jsonplaceholder.typicode.com/posts", {
        params: {
          _start: (query.page - 1) * query.pageSize,
          _limit: query.pageSize,
        },
      })
      .then((res) => res.data);
  };

  return useQuery<Post[], Error>({
    queryKey: ["posts", query],
    queryFn: fetchPosts,
  });


task 4 - add some buttons:
simply need to add buttons, then increment/decrement on click.
      <button
        className="btn btn-primary my-3"
        disabled={page === 1}
        onClick={() => {
          setPage(page - 1);
        }}
      >
        Previous
      </button>

      <button
        className="btn btn-primary my-3 ms-1"
        onClick={() => {
          setPage(page + 1);
        }}
      >
        Next
      </button>

  

caveats:
JSON placeholder does not give us the total number of pages, so we cannot tell when we've reached the end.
For now its okay, we will proceed as is.

another issue is when we scroll, the page triggers a load & disrupts the UI.
To change this, we can turn on keepPreviousData so we have keep the old data on screen, while the refresh is happening.

  return useQuery<Post[], Error>({
    queryKey: ["posts", query],
    queryFn: fetchPosts,
    staleTime: 1 * 60 * 1000, //1m
    keepPreviousData: true
  });


---infinite queries:---
another similar scenario, we're going to add a button to load more data infintely.
We will worry about the inifite scroll piece later.

task 1 - remove page:
So because we're moving away from the pages concept, we need to remove it here.
  const pageSize = 10;
    usePosts({ pageSize });


task 2 - modify to useInfiniteQuery:
-change to useInfiniteQuery
return useInfiniteQuery<Post[], Error>({
   
-destructure pageParam from AXIOS & jsonplaceholder backend.
 queryFn: ({ pageParam = 1 }) =>

-provide function for tracking & pass to getNextPageParam.
every backend if different, but json place holder works like this.
allPages[page[pageData]] is nested array, we need the page to access correct data.
    getNextPageParam: (lastPage, allPages) => {
      return lastPage.length > 0 ? allPages.length + 1 : undefined;
    },
  });
};

task 3 - add button to trigger load:
We have fetchNextPage function and isFetchingNextPage to use for the loading button.

  const { data, error, isLoading, fetchNextPage, isFetchingNextPage } =
    usePosts({ pageSize });

<button
        className="btn btn-primary my-3"
        disabled={isFetchingNextPage}
        onClick={() => fetchNextPage()}
      >
        {!isFetchingNextPage ? "Load More" : "Fetching..."}
</button>


task 4 - display data:
because of the nested structure now we need to modify the displaying of data.
again allPages[page[]]

 {data.pages.map((page, index) => (
          <React.Fragment key={index}>
            {page.map((post) => (
              <li key={post.id} className="list-group-item">
                {post.title}
              </li>
            ))}
          </React.Fragment>



---Part 2 - mutating data:---
So in this section we'll look at
-creating mutations
-handling mutation errors
-implementing optimistic updates
-creating custom mutation hooks
-building services for querying/mutating data


---Mutating Data:---
So to get started we're going to create an Add Post button to demonstrate data mutating.


Task 1 - submit the form:
      onSubmit={(event) => {
        event.preventDefault();


Task 2 - Add Mutation Function:
-

  const addTodo = useMutation({
    mutationFn: (todo: Todo) =>
      axios
        .post<Todo>("https://jsonplaceholder.typicode.com/todos", todo)
        .then((res) => res.data),
    onSuccess: (savedTodo, newTodo) => {
      console.log("savedTodo - ", savedTodo);
      ]);
    },
  });


Task 3 - Submit triggers update:
-check object before sending.
-call mutate function & pass form data.
        if (ref.current && ref.current.value)
          addTodo.mutate({
            id: 0,
            title: ref.current?.value,
            completed: false,
            userId: 1,
          });

We have 2 solutions at this point, either invalidate the cache & trigger a refresh
or
update the cache ourselves.

APPROACH 1 - does NOT work with JSON placeholder, as its fake backend:
queryClient.invalidateQueries({ queryKey: ["todos"] });

APPROACH 2 - updating cache

Task 4 - Update Cache:
-import query client to access the data.
  const queryClient = useQueryClient();

-jthey modify how we normally update data, it must be IMMUTABLE
 queryClient.setQueryData<Todo[]>(["todos"], (todos) => [
        savedTodo,
        ...(todos || []),
      ]);

Take Home:
it seems to be quite handy, while both components use the same data source we can mutate in the add component,
and see changes in the list component, by modiying the shared cached.
Makes it easier to keep data in sync.



---Handling Mutation Errors:---
So how do we handle errors during mutations?


task 1 - update types:
We need to specicy input, error & output types for useMutation.
const addTodo = useMutation<Todo, Error, Todo>({


task 2 - show message:
only if we have an error do we render this new section.
Again we got errors with the types, until we provider the <Todo, Error, Todo> above.
 {addTodo.error && (
        <div className="alert alert-danger">{addTodo.error.message}</div>
      )}

simple as that.


---Showing mutation progress:---
mutating the data can take some time, so often we want to show a spinner when thats happening.


task 1 - add loading indicator:
<button className="btn btn-primary">
            {addTodo.isLoading ? "Adding..." : "Add"}
</button>


task 2 - clear form:
 onSuccess: (savedTodo, newTodo) => {
      console.log("savedTodo - ", savedTodo);

      if (ref.current) ref.current.value = "";


---optimistic updates:---
So to implement optimistic updates, we can update the list BEFORE the network call.


task 1 - onMutate:
So react query has a function onMutate, which will run before the onSuccess callback function is done.
 onMutate: (newTodo) => {
      queryClient.setQueryData<Todo[]>(["todos"], (todos) => [
        newTodo,
        ...(todos || []),
      ]);
    },


task 2 - update the record on success:
So the mutate function only put in a placeholder value, we need to update with one generated from the backend.
If we have a duplicate, return the new value otherwise keep it as is.
    onSuccess: (savedTodo, newTodo) => {
      console.log("savedTodo - ", savedTodo);

      queryClient.setQueryData<Todo[]>(["todos"], (todos) =>
        todos?.map((todo) => (todo === newTodo ? savedTodo : todo))
      );
    },


task 3 - handle errors:
we need to store the old todos data, so we can restore later.
-we need to create the interface for the previousTodos
returned in the mutation.
interface AddTodoContext {
  previousTodos: Todo[];
}

-save before mutation
    onMutate: (newTodo) => {
      const previousTodos = queryClient.getQueryData<Todo[]>(["todos"]) || [];
      console.log("saved - ", previousTodos);

      queryClient.setQueryData<Todo[]>(["todos"], (todos) => [
        newTodo,
        ...(todos || []),
      ]);

      return { previousTodos };
    },

-finally implement onError
 onError: (error, newTodo, context: AddTodoContext) => {
      if (!context) return;
      queryClient.setQueryData<Todo[]>(["todos"], context.previousTodos);
    },


---creating a mutation hook:---
So just like before, our component has gone way too bloated with mutation, axios and everything else.
Lets start refactoring to a reuseable mutation hook to handle adding of items.



task 1 - extract code out here.
-create the useAddTodo.ts file, and extract everything to do with the data manipulation & saving.
const useAddTodo = () => {
  const queryClient = useQueryClient();



task 2 - pass in Callback function (for consumers):
We want our consumers to be notified when the work is done, so they clear the form or whatever else they need to.

-pass callback to our function.
const useAddTodo = (onAdd: () => void) => {

-invoke after work is done.
        onAdd();
      return { previousTodos };



We may aswell take the opportunity to improve a couple things.

-1 - undefined fix, assign value [].
if we assign the value to [], we cover the undefined scenario.
queryClient.setQueryData<Todo[]>(CACHE_KEY_TODOS, (todos = []) => [
        newTodo,
        ...todos,
      ]);
    vs
    ...(todos || [])


-2 - global keys:
chances of a typing 'todos' wrong in one of the dozen places quite high.
Set this globally
export const CACHE_KEY_TODOS = ["todos"];

annnd we're done.


---reuseable API client:---
another improvement we could make is to address the API duplication in useTodos & AddTodos components.
So lets start by creating an API client.

task 1 - create generic service:
import axios from "axios";
const axiosInstance = axios.create({
  baseURL: "https://jsonplaceholder.typicode.com",
});

class APIClient<T> {
  endpoint: string;

  constructor(endpoint: string) {
    this.endpoint = endpoint;
  }

  getAll = () => {
    return axiosInstance.get<T[]>(this.endpoint).then((res) => res.data);
  };

  post = (data: T) => {
    return axiosInstance.post<T>(this.endpoint, data).then((res) => res.data);
  };
}

export default APIClient;


Task 2 - update usages:
so fairly simple, newup the API client object, passing the URL.
Then assign the query function to our new APIClient.getAll & voila we've remove a whole load of code.

const apiClient = new APIClient<Todo>("/todos");

const useTodos = () => {
  return useQuery<Todo[], Error>({
    queryKey: CACHE_KEY_TODOS,
    queryFn: apiClient.getAll,
    //staleTime: 10 * 1000,
  });
};

AND the form component.
 mutationFn: apiClient.post, //(todo: Todo) => apiClient.post(todo),



Problem:
What gives? the endpoint is undefined & our page is blowing up.
This it because of how we pass the THIS context around, the reference function seems to have lost its context
const useTodos = () => {
  return useQuery<Todo[], Error>({
    queryKey: CACHE_KEY_TODOS,
    queryFn: apiClient.getAll,
    //staleTime: 10 * 1000,
  });
};


The Fix:
option 1 - Speically binding the APIClient:
    queryFn: apiClient.getAll.bind(apiClient),

or alternativly using the arrow syntax, as arrow functions dont have their own context, so THIS will always refer
to THIS inside the class.

options 2 - arrow functions:
  getAll = () => {
    return axiosInstance.get<T[]>(this.endpoint).then((res) => res.data);
  };

  post = (data: T) => {
    return axiosInstance.post<T>(this.endpoint, data).then((res) => res.data);
  };

  nice work we've cleaned up our code again quite some bit.



---Creating a reuseable HTTP service:---
So the problem we have currently is we have 2 instances of the API client in
useAddTodos and in useTodos(the fetching).
const apiClient = new APIClient<Todo>("/todos");


Task 1 - create service:
-create service
-extract todo class into service
export interface Todo {
  id: number;
  title: string;
  userId: number;
  completed: boolean;
}

-export new todos APIClient.
export default new APIClient<Todo>("/todos");


Task 2 - update hooks:

const useTodos = () => {
  return useQuery<Todo[], Error>({
    queryKey: CACHE_KEY_TODOS,
    queryFn: todoService.getAll,
    //staleTime: 10 * 1000,
  });
};


results:
we created a wrapper on API client, so now ever our hooks dont do any configuration of the APIClient either.
We can remove the duplication and centralize the code so any future changes are easier.

const apiClient = new APIClient<Todo>("/todos");
 queryFn: apiClient.getAll,

becomes 1 liner. NICE.
 queryFn: todoService.getAll,



---Understanding the Application Layers:---
The great thing about our architecture is that each layer has a single responsability & good seperation of concerns.
The Component knows nothing about the data fetching, the hooks know nothing about the HTTP configuration,
and the HTTP services know nothing about the API & networking configuration
-reduce duplication
-improve scalability
-reduce bugs
-improve maintenance

Components - TodoForm, Todolist (renders)
custom hooks - useTodos, useAddTodo (manages state & errors)
HTTP Services - todoService (instnaces of API client for specific objects)
API Client - API Client (handles HTTP)



---excercise:---

-Excercise 1 - fetch genres using react query:
-clone projtect
-update API KEY
-install react query using dev tools
-update provider in main.tsx and make sure that works - done
-generic http service - done
-specific service implementation - done
-refactor useGenres to useReactQuery - done
-modify hook
-modify component
-think my solution is working, but perhaps the the 2 different services calling the same API a problem.
either A, stick to existing version or B, migrate other sections too... option A plz.
-come back & evaluate moshes solution.

Moshes Version:
so in the mosh version he kept it simple, and used the APIClient we already created, which helps.

  return useQuery({
    queryKey: GENRE_CACHE_KEY,
    queryFn: getGenres,
    staleTime: 24 * 60 * 60 * 1000, //24h
    initialData: { count: genres.length, results: genres },
  });

And also used the FetchResponse object we created earlier, just makes more sense for this particular API to keep
the same format.
const getGenres = () => {
  return apiClient
    .get<FetchResponse<Genre>>("/genres")
    .then((res: any) => res.data);
};


---excercise 2 - platforms hook:---
So we need to do the same, but for platforms component & hook.
Exact same as previous excercise, only exception being the endpoint slighly different.

/platforms returns duplices & old platforms, lists/parents has the top ones.
.get<FetchResponse<Platform>>("/platforms/lists/parents")



---excercise 3 - fetching games:---
This one is slightly more complex, with the inclusion of queryParams in the getGames call.
Spent some time analyzing the useData hook, and 90% of this code is features included in reacty query hook.

Where to put DEPS?
The previous useData had a ...deps array in the useEffect. This was used to track changes to the filter state, and re run when needed.
This is no longer needed as the APP.tsx stores gameQuery in state, and passes as input, which will trigger change to gameGrid & network call.

function App() {
  const [gameQuery, setGameQuery] = useState<GameQuery>({} as GameQuery);

in GameGrid
  const { data, error, isLoading } = useGames(gameQuery);


Bug:
Previous the params were set to "platforms", and when clicking playstaion nothing shows up. 
The correct parent_platforms, which matches our changes in usePlatform hook ("/platforms/lists/parents")

   return apiClient
    .get<FetchResponse<Game>>("/games", {
      params: {
        genres: gameQuery.genre?.id,
        parent_platforms: gameQuery.platform?.id, //moshes fix (parent_platforms not platform)
        ordering: gameQuery.sortOrder,
        search: gameQuery.searchText,
      },
    })
    .then((res: any) => res.data);


---excercise - removing platform:---
remove the duplicate platorm and now other references.


---excercise - reuseable API client:---
The data fetching logic has been duplicated in a few places, namely:
getGenres
getGames
getPlatforms

const getGenres = () => {
  return apiClient
    .get<FetchResponse<Genre>>("/genres")
    .then((res: any) => res.data);
};

we could remove all this code with a simple queryFn = service.get
And let the service handle the URL & object types etc.



---Implementing infinite queries:---
So lets get cracking adding infinite query.

-update toUseInifiteQuery
-provide getNextPage logic (RAWG has next or undefined)
-update component to iterate over pages instead of data.