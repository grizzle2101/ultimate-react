---Global State Management:---

---Introduction:---
In this section we'll explore many tools & techniques for managing state across the entire application,
not just within individual components.


We will learn:
-consolidating state logic with a reducer (essential for any react developer)
-sharing data using react context
-when to use react context vs state management libraries
-react context vs redux
-managing application state using zustand


---consolidating state logic with a reducer:---

What is a reducer?
A function that allows us to centralize state updates in a component.

Example:
We have the counter component, which updates state & resets it, fairly simple.
What if we want to modify this counter elsewhere? we need a reducer to manage the state.
const Counter = () => {
  const [value, setValue] = useState(0);

  return (
    <div>
      Counter ({value})
      <button
        onClick={() => setValue(value + 1)}
        className="btn btn-primary mx-1"
      >
        Increment
      </button>
      <button
        onClick={() => setValue(0)}
        className="btn btn-primary mx-1"
      >
        Reset
      </button>
    </div>
  );
};



task 1 - create a reducer function:
-create reducers folder
-create counterReducer.ts file
-by convention a reducer takes a STATE & ACTION as parameters.
-perform the action as specified.
-return something.

const counterReducer = (state: number, action: Action): number => {
  if (action.type === "INCREMENT") return state + 1;
  if (action.type === "RESET") return 0;
  return state;
  //OR
  throw new Error("Action is not supported");
  //OR we only allow INCREMENT or RESET
  // specificType: "INCREMENT" | "RESET";
};

What happens if the wrong action is passed?
either we return the state anyway.
throw an Error
or limit the ACTIONS using STRING LITERAL TYPES.



task 2 - update component:
-instead of useState we have useReducer.
-this takes a reducer function & inital value.
-this returns a value(state) and dispatch function, to be called to invoke an action.
  //const [value, setValue] = useState(0);

  const [value, dispatch] = useReducer(counterReducer, 0);


task 3 - add dispatch functions to buttons.
    <div>
      Counter ({value})
      <button
        onClick={() => dispatch({ type: "INCREMENT" })}
        className="btn btn-primary mx-1"
      >
        Increment
      </button>
      <button
        onClick={() => dispatch({ type: "RESET" })}
        className="btn btn-primary mx-1"
      >
        Reset
      </button>


So the handy part now is the component knows nothing about state, a clear seperation of concerns with this approach.
In the next section we'll look at complex actions.


---Creating Complex Actions:---
Oftentimes our actions will be more complex, and require passing in data. how do we achieve that with reducers?
Like this task list component, adding & deleting data.

task 1 - create reducer function:
const taskReducer = (): Task[] => {
  switch (action.type) {
    case "ADD":
      return [action.task, ...tasks];
    case "DELETE":
      //note the compiler knows what properties are available for ADD & Delete, v cool.
      return tasks.filter((t) => t.id !== action.taskId);
  }
};


Task 2 - add an Action with a payload:
We can use a payload to the action object with the data needed.
-original method
/*
interface Action {
  type: "ADD" | "DELETE";
}
*/

-new method using payload
-task has id & number
export interface Task {
  id: number;
  title: string;
}

-addTask has a type & task payload
export interface AddTask {
  type: "ADD";
  task: Task;
}

-delete only has the taskId
export interface DeleteTask {
  type: "DELETE";
  taskId: number;
}

-create an object that consists of the AddTask OR Delete Task only, using union operator.
type TaskAction = AddTask | DeleteTask;

-pass to reducer like so.
const taskReducer = (tasks: Task[], action: TaskAction): Task[] => {


Task 3 - update component:
-again replace state with reducer function.
  const [tasks, setTasks] = useState<Task[]>([]);

  const [tasks, dispatch] = useReducer(taskReducer, []);


-modify on click to dispatch the Action
 <button
        onClick={
          () => {
            dispatch({
              type: "ADD",
              task: { id: Date.now(), title: "Task " + Date.now() },
            });
          }
          //setTasks([{ id: Date.now(), title: "Task " + Date.now() }, ...tasks])}
        }
        className="btn btn-primary my-3"
      >
        Add Task
      </button>


Test everything still works as before! Add & delete.



---excercise:---
implment a reducer for Login component.



---Sharing state using react context:---
So far we talked about sharing state between components, in our application we might want to
share tasks or shopping cart items, but how do we do it?

First Step - Sharing State:
Lift the state up to the closest parents and pass it down to child components.

Our application:
app
homepage
navbar
tasklist

Storing state in the app is fine, except the hompage sits between the app and navbar component.
Using the homepage to pass the state through it called prop drilling.
I.e we're drilling through a component to get to another.

React Context:
React Context allows sharing of data without passing it down through many components in the middle.
Giving us cleaner & more maintainable code.

Task 1 - Lift State:
function App() {
  const [tasks, dispatch] = useReducer(taskReducer, []);


Task 2 - create context:
-first step is to define the shape of the data. - tasks & dispatch a TaskAction.
interface TasksContextType {
  tasks: Task[];
  dispatch: Dispatch<TaskAction>;
}

-then we create a Context using react.createContext.
-we can set the initial value of state here, but 90% its empty.
-we can use null TasksContextType | null>(null) or like below.
-export the context

const TasksContext = React.createContext<TasksContextType>(
  {} as TasksContextType
);

export default TasksContext;


step 3 - wrap components in context:
So to use context properly, we need to wrap the components within our TasksContext.
-provide an initial value & function here, the state declared above.

  const [tasks, dispatch] = useReducer(taskReducer, []);

  return (
    <TasksContext.Provider value={{ tasks, dispatch }}>
      <NavBar />
      <HomePage />
    </TasksContext.Provider>


step 4 - use context:
 const { tasks, dispatch } = useContext(TasksContext);



Take Home:
We've provided the ability to pass data to any components WITHOUT prop drilling.
Even though homepage contains TaskList, we can still access the context, and so too can navbar
      <NavBar />
      <HomePage />

Step Summary:
-lift the state (useReducer(taskReducer)) to the highest parent component (app.tsx)
-create a context, define the shape of the data.
-create & export the context using React.createContext<TasksContextType> & our initial value.
-wrap the components in the context using the state & dispatch <TasksContext.Provider value={{ tasks, dispatch }}>
-access the context inside the child components - const { tasks, dispatch } = useContext(TasksContext);

1 - lift the state
2 - create a context
3 - wrap components in context
4 - useContext where needed.


---Excercise:---
Create a context for sharing the local user.
Repeat the process as above, just this time we're Storing & sharing the user object.

Only difference:
Mosh created an AuthContext not a login context, makes a bit more sense as it will be doing more than login.

Testing:
Open chrome developer tools, then head over to the react dev tools components section.
Now we can see the components and the contexts that wrap them to provider data.
3 of them belong to react query, thats how it passes data around, and 2 are us.
We can see the LoginContext & TasksContext, and see the data/objects contained in them.



---Creating a custom provider:---
So currently we're keeping track of 2 states, the user & tasks.
We can improve this code by moving it into a custom provider.


task 1 - extract state to provider.
const AuthProvider = ({ children }: Props) => {
  const [user, dispatch] = useReducer(loginReducer, "");

  return (
    <AuthContext.Provider value={{ user, dispatch }}>
      {children}
    </AuthContext.Provider>
  );
};

task 2 - pass in children props, so we can wrap.
interface Props {
  children: ReactNode;
}



task 3 - Usage:
  return (
    <AuthProvider>
      <TasksContext.Provider value={{ tasks, dispatch }}>
        <NavBar />
        <HomePage />
      </TasksContext.Provider>
    </AuthProvider>
  );
}

So now the AuthContext is much more reuseable & modular, if we want to use this in other parts of the App its a simple change.



---Creating a custom context hook:---
Just as we can create a custom provider, we can also create a custom hook to access context.
React query uses this exact sane pattern, useQueryClient to access the context & its data.


step 1 - create authContext hook:
-export the useContext configured to use AuthContext.

import { useContext } from "react";
import AuthContext from "../contexts/authContext";

const useAuth = () => useContext(AuthContext);

export default useAuth;



step 2 - usage:
So in the loginStatus component, to access the context we dont need to import context & specify auth context,
we have a single import to useAuth & voila all done.
import useAuth from "./hooks/useAuth";

const LoginStatus = () => {
  const { user, dispatch } = useAuth();
